SceneObjectThreeJs {
    property var positions: source.positions

    property var color: 0x0000ff
    property var colors
    property var radius: 0.25

    property var priority: 0

    /////////////////// graphics part
    id: qmlObject

    onRadiusChanged: {
      if (!this.sceneObject || !this.sceneObject.material) return;
      this.sceneObject.material.size=radius;
      this.sceneObject.material.needsUpdate=true;
    }

    onPositionsChanged: {
//        console.log("changed, scheduling remake of points");
        makeLater( this );
        /*
        if (!this.sceneObject) return;
                if (positions)
                this.sceneObject.geometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array(positions), 3 ) );

        var attr = this.sceneObject.geometry.getAttribute("position");
        //attr.set( new Float32Array(positions) );
        attr.needsUpdate = true;
        */
    }
    
    onColorsChanged: {
        makeLater(this);
        /*
        if (qmlObject.sceneJsRootNode && qmlObject.sceneJsGeometryNode.getColors() && qmlObject.sceneJsGeometryNode.getColors().length == qmlObject.colors.length)
            qmlObject.sceneJsGeometryNode.setColors( { colors: qmlObject.colors } );
        else
            makeLater( qmlObject );
        */
    }

    onOpacityChanged: {
      if (!qmlObject.sceneObject) return makeLater(this);

      var mat = qmlObject.sceneObject.material;
      if (!mat) return;

      mat.opacity = opacity;
      mat.transparent = opacity < 1;
      mat.needsUpdate = true;  
    }
    

   /* 
    onVisibleChanged: {
        //makeLater(this);
        this.sceneObject.visible = visible;
    } */   

    /*
    onOpacityChanged: {
        if (!qmlObject.sceneJsRootNode) { makeLater( qmlObject ); return; };
        qmlObject.sceneJsMaterialNode.setAlpha( qmlObject.visible ? qmlObject.opacity : 0 );
    }


    onVisibleChanged: {
        if (!qmlObject.sceneJsRootNode) { makeLater( qmlObject ); return; };
        qmlObject.sceneJsMaterialNode.setAlpha( qmlObject.visible ? qmlObject.opacity : 0 );
    }


    onPriorityChanged: {
        if (!qmlObject.sceneJsRootNode) { makeLater( qmlObject ); return; };
        qmlObject.sceneJsPriorityNode.setPriority( qmlObject.priority );
    }
*/
  function somethingToColor( theColorData )
  {
    return theColorData.length && theColorData.length >= 3 ? new THREE.Color( theColorData[0], theColorData[1], theColorData[2] ) : new THREE.Color(theColorData);
  }

    function make3d()
    {
        var colors_good = (colors && positions && colors.length > 0) ? positions.length/3 == colors.length/3 : true;
        var geom_good = (positions ? true : false);

        var have_colors = (colors && colors.length > 0);
        var use_colors = (have_colors && colors_good);

        if (!(colors_good && geom_good)) {
            //console.log("Points::make3d() exiting, because conditions on colors and geometry fail. geom_good=",geom_good,"colors_good=",colors_good);
            return;
        }

        clear();

        /////////////////////////////////
        var geometry = new THREE.BufferGeometry();
        
        if (positions)
            geometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array(positions), 3 ) );

        if (use_colors) {
            geometry.addAttribute( 'color', new THREE.BufferAttribute( new Float32Array(colors), 3 ) );
            console.log("geometry added color attr");
        }

        geometry.computeBoundingSphere();
        
        /////////////////////////////////
        
        //  мульти-материальная геометрия http://threejs.org/examples/webgl_geometry_colors.html
        
        //var material = new THREE.MeshBasicMaterial( { color: 0x00ffff } );
        
        var c = somethingToColor( color );
        
        var materialOptions = {
            /*color:c,*/ size: radius
        }

        if (use_colors) 
            materialOptions.vertexColors = THREE.VertexColors;
        else
            materialOptions.color = c;
            
        if (opacity < 1) {
            materialOptions.transparent = true;
            materialOptions.opacity = opacity;
        }


        var material = new THREE.PointCloudMaterial( materialOptions );

        /////////////////////////////////
        this.sceneObject = new THREE.PointCloud( geometry, material );
        this.sceneObject.visible = visible;

        scene.add( this.sceneObject );
        make3dbase();
    }
    
    function clear() {
      clearobj( this.sceneObject ); 
      this.sceneObject = undefined;
    }

    function clearobj(obj) {
        if (obj) {
            // http://stackoverflow.com/questions/12945092/memory-leak-with-three-js-and-many-shapes
            // http://mrdoob.github.io/three.js/examples/webgl_test_memory.html
            scene.remove( obj );
            obj.geometry.dispose();
            obj.material.dispose();
            if (obj.texture)
                obj.texture.dispose();
        }
    }
    
}
